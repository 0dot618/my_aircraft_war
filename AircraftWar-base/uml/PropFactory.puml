@startuml
'https://plantuml.com/class-diagram

abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} propActive(HeroAircraft heroAircraft):void
}

class BloodProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + propActive(HeroAircraft heroAircraft):void
}

class BombProp {
    - {static} flyingObjectObserverList:List<FlyingObjectObserver>
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + {static} addFlyingObjectObserver(FlyingObjectObserver objectObserver):void
    + {static} addFlyingObjectObserver(List<BaseBullet> objectObservers):void
    + {static} removeFlyingObjectObserver(FlyingObjectObserver objectObserver):void
    + notifyFlyingObjectObserver():void
    + propActive(HeroAircraft heroAircraft):void
}

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + propActive(HeroAircraft heroAircraft):void
}

class BulletPlusProp {
    + BulletPlusProp(int locationX, int locationY, int speedX, int speedY)
    + propActive(HeroAircraft heroAircraft):void
}

BaseProp <|-up- BloodProp
BaseProp <|-up- BombProp
BaseProp <|-up- BulletProp
BaseProp <|-up- BulletPlusProp

abstract class PropFactory {
    + {abstract} creatProp(int locationX, int locationY):BaseProp
}

class BloodPropFactory {
    + creatProp(int locationX, int locationY):BaseProp
}

class BombPropFactory {
    + creatProp(int locationX, int locationY):BaseProp
}

class BulletPropFactory {
    + creatProp(int locationX, int locationY):BaseProp
}

class BulletPlusPropFactory {
    + creatProp(int locationX, int locationY):BaseProp
}

PropFactory <|-- BloodPropFactory
PropFactory <|-- BombPropFactory
PropFactory <|-- BulletPropFactory
PropFactory <|-- BulletPlusPropFactory

BloodProp <.up. BloodPropFactory
BombProp <.up. BombPropFactory
BulletProp <.up. BulletPropFactory
BulletPlusProp <.up. BulletPlusPropFactory


@enduml